Spring
IOC:
1. applicationContext 配置文件
   1.1 bean标签 一方面把目标对象放入容器，另一方面property/ref引入其他对象作为目标对象的属性（set注入）
       constructor-arg（构造器注入）
   1.2 当使用dbutils，借用QueryRunner对象来实现增删改查，需要ResultSetHandler类型参数，
       用其实现类BeanListHandler、BeanHandler来充当
       
2. 注解
   2.1 Spring整合Junit需要用到两个注解：@RunWith注解替换原有运行器，参数SpringJUnit4ClassRunner.class(Spring框架提供)
       @ContextConfiguration指定spring配置文件的位置来创造容器,locations="classpath:" 或者用classes指定注解类的位置
AOP:
1. applicationContext 配置文件
   1.1 aop:config标签 设置通知，内部使用aop:aspect指明增强的方法，aop:pointcut指明被增强的方法
   1.2 环绕通知，需要在增强的方法里引入ProceedingJoinPoint的对象作为参数，方法内部调用proceed
2. 注解
   2.1 需要配置标签<aop:aspectj-autoproxy/> 开启aop的支持
   2.2 类上加@Aspect指明其是增强方法所在的类，增强方法上用@around/@before/@after/...
       切入点表达式抽离出来用@Pointcut 注在额外准备的方法上，方法名作为其他增强方法切入点表达式的引用
JdbcTemplate
applicationContext 配置文件
   1. Spring 框架提供很多模板，包括操作关系型数据的：JdbcTemplate; 操作nosql数据库的：RedisTemplate;
      操作消息队列的：JmsTemplate
   2. Spring框架内置数据源：DriverManagerDataSource(在spring-jdbc-版本.REEASE.jar 包中)
   3. 借助JdbcTemplate对象实现增删改查，其中query方法需要RowMapper类型参数，采用找其实现类BeanPropertyRowMapper对象来充当
      
   4. Spring 框架提供事务控制的API，在spring-tx-版本.RELEASE.jar中，事务管理器DataSourceTransactionManager
   5. 5.1 bean标签配置事务管理器
      5.2 tx:advice配置通知，其内部用tx:attributes配置属性(传播行为，是否只读等)
      5.3 <aop:config>配置aop
注解：
   1. 需要配置标签 tx:annotation-driven 开启对事务的支持 
   2. xml文件需注入事务管理器，用@Transactional(propagation = ,readOnly = )注在需要事务的类上
      如类中方法需要有不同事务属性，可在方法上再注@Transactional(propagation = ,readOnly = )去覆盖类上的注解

MyBatis
   持久层框架
1. SqlMapConfig.xml主配置文件
   1.1 typeAliases标签 给实体类起别名
   1.2 mappers标签 用于dao包与对应路径且同名的xml配置文件一一映射（例如:dao包下UserDao接口与UserDao.xml）
   1.3 配置数据连接池
   1.4 settings 开启延迟加载，同时UserDao.xml中resultMap需额外指明select(要调用的接口方法)，column(要传递给方法的参数)
2. UserDao.xml配置文件
   2.1 namespace 指明接口
   2.2 增删改查的SQL语句，id 指明接口的方法
   2.3 resultMap 指明多表联合查询属性与字段的映射
   2.4 默认不支持驼峰映射，需手动开启    
       <configuration>  
            <settings>  
               <setting name="mapUnderscoreToCamelCase" value="true" />  
            </settings>  
       </configuration> 
   2.5 开启缓存
   
SpringMVC
web.xml
   1. 当启动Tomcat服务器，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象; init-param 里设置加载springmvc.xml配置文件 
   
springmvc.xml	  
   1. 1.1开启注解扫描
      1.2 mvc注解支持，那么Controller对象就会被创建
   2. 从index.jsp发送请求，请求会先到达DispatcherServlet控制器，根据@RequestMapping注解找到执行的具体方法
   3. 执行方法有返回值，再根据视图解析器，去指定的目录下查找指定名称的JSP文件
   4. Tomcat服务器渲染页面，做出响应
   
   常用注解：
   1. RequestParam()注解  把请求中的指定名称的参数传递给方法中的形参赋值
   2. RequestBody注解 (get请求不适用，因为get请求没有请求体) 用于获取请求体的内容，格式如key1=v1&key2=v2...
   3. PathVariable注解 获取绑定url中的占位符，例如：url中有/delete/{id}，用来获取id
   4. 响应
      4.1 请求转发 方法参数使用HttpServletRequest,HttpServletResponse，转发路径需要/WEB-INF/pages/，因为请求转发没有借助视图解析器
          request.getRequestDispatcher("/WEB-INF/pages/.jsp").forward(request, response) 请求转发是一次请求不用写项目名
      4.2 重定向 不能进入/WEB-INF/ 使用response.sendRedirect(request.getContextPath()+"/.jsp")
	      重定向是两次请求,需要写项目名
      4.3 直接响应数据 response.getWriter().write("") 
      4.4 方法返回值是ModelAndView对象  相当于Mode与响应的整合
          1.直接创建对象 
	      2.addObject()添加对象 
	      3.setViewName("")指定跳转的页面，会借助视图解析器,且跳转页面可取得设置的对象 
	      4.return
   6. 静态资源不拦截：配置标签mvc:resources  
      设置isELIgnored="false" 可使用EL表达式(${})   
      引入<script src="js/jquery.min.js"></script>    jQuery是一个JavaScript库
	  注意：1.引入时默认resources下        
   7. @ResponseBody  以json字符串格式响应数据
   
   8. 跨服务器文件上传：SpringMVC框架提供了MultipartFile对象(该对象表示上传的文件，要求名称必须和表单file标签的name属性名称相同
      在org.springframework.web.multipart.commons.CommonsMultipartResolver 中
      8.1 配置文件解析器  id名称必须是 multipartResolver
	  8.2 form 表单的enctype(表单请求正文的类型)取值必须是：multipart/form-data(默认值是:application/x-www-form-urlencoded) 
	      method 属性取值必须是 Post
          提供一个文件选择域<input type=”file” />
      8.3 流程：1.创建接收文件服务器客户端对象Client client = Client.create()
	            2.连接服务器 WebResource webResource = client.resource(path+filename)
				  2.1 path：文件将要放在服务器的文件夹地址
	              2.2 filename：用upload.getOriginalFilename()得到文件的名字(upload：MultipartFile对象名)
	                  path+filename：表示上传成功后，文件将来的路径
				  2.3 上传 webResource.put(upload.getBytes())
   9. 异常处理 
          Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进行异常的处理
          处理方式：可以是跳转到异常页面
      9.1 自定义异常类
	  9.2 自行定义异常处理器类(实现 HandlerExceptionResolver)，并用bean标签在springmvc.xml文件中配置
  10. 拦截器 只对Controller中的方法进行拦截 
      10.1 自定义拦截器类(实现HandlerInterceptor)
	       HandlerInterceptor接口中的方法
		 1. preHandle是controller方法执行前执行的方法
            1.1 return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法
            1.2 return false不放行，不会执行controller中的方法
         2. postHandle是controller方法执行后执行的方法，在JSP视图执行前
            2.1 当使用request或者response跳转到指定的页面时，controller方法跳转的页面就没机会显示了，但跳转的代码会执行		       
         3. afterCompletion是在controller方法的JSP执行后执行的方法			           
            3.1 request或者response不能再跳转页面了   
	  10.2 配置拦截器：用<mvc:interceptors>标签在springmvc.xml文件中配置           
		    <mvc:interceptors> 
		        <mvc:interceptor> 
				    <!-- 哪些方法进行拦截 --> 
				    <mvc:mapping path="/user/*"/> 
				    <!-- 哪些方法不进行拦截 <mvc:exclude-mapping path=""/> --> 
					
				    <!-- 注册拦截器对象 --> 
				    <bean class="cn.itcast.demo1.MyInterceptor1"/> 
				</mvc:interceptor> 
		    </mvc:interceptors>	   	     
	   注意: 拦截器和过滤器的功能比较类似，有区别
            1. 过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术
            2. 拦截器是SpringMVC框架独有的
            3. 过滤器配置了/*，可以拦截任何资源
            4. 拦截器只会对控制器方法进行拦截
			
SSM 
    整合的思路：1.先写Spring 2.再写Mybatis 3.最后写SpringMVC
	1. Spring 配置文件applicationContext 
	   1.1 扫描要排除Controller注解
	2. Mybatis 配置文件SqlMapConfig.xml内容写到Spring配置文件中，以除掉Mybatis原有SqlMapConfig.xml配置文件
	   
	   2.1 bean标签注入dataSource
	   2.2 bean标签注入org.mybatis.spring.mapper.MapperScannerConfigurer 替换原来SqlMapConfig.xml中的mapper映射
	   2.3 bean标签注入org.mybatis.spring.SqlSessionFactoryBean 
	   2.4 bean标签注入事务管理器
	       org.springframework.jdbc.datasource.DataSourceTransactionManager
	   2.5 tx:advice标签注入事务  其中<tx:attributes>注入属性
	   2.6 aop:config标签注入aop  aop:pointcut/ aop:advisor	 
	以配置文件并入的方式，Spring框架启动会引动Mybatis框架
	3. SpringMVC 配置文件springmvc
	   3.1 扫描仅包含Controller注解
	   3.2 开启mvc注解支持
	   3.3 bean标签注入视图解析器	   
	   SpringMVC 配置文件web.xml(过滤器，前端控制器已有，再配置监听器)
	   3.4 bean标签注入监听器 
	       org.springframework.web.context.ContextLoaderListener
	       其中context-param标签注明classpath:applicationContext.xml
    以监听器方式，SpringMVC框架启动会引动Spring框架
	至此，启动Tomcat即可完成三层架构整合
	
Mybatis-Plus
    1. Mybatis+Mybatis-Plus整合
	   1.Dao接口继承BaseMapper<>  以继承CRUD方法
	     注意：SqlMapConfig.xml主配置文件中的mappers标签映射要保留
	   2.测试时，创建MybatisSqlSessionFactoryBuilder对象以替代Mybatis的SqlSessionFactoryBuilder
    2. Mybatis+Mybatis-Plus+Spring整合
	   1.将SqlMapConfig.xml配置内容并入Spring配置文件applicationContext中即可
    3. Mybatis+Mybatis-Plus+Springboot整合
	   与Springboot整合Mybatis一样
	  3.1 CRUD操作
	      1. insert 
		     数据库表中的主键id 设为自增，用insert插入一条数据不含id时，自动生成的id不满足自增，
	         需在pojo类对id标注解@TableId(type = IdType.AUTO)
          2. @TableField  可以指定字段的一些属性
	         1. 对象中的属性名和字段名不一致的问题
	         2. 对象中的属性字段在表中不存在的问题  @TableField(exist=false)
		     3. 当查询时,结果可以避免属性查出  @TableField(select=false) 
	      3. 根据条件update
	         1. 用update(wrapper)方法，条件借助QueryWrapper对象的方法(例如eq,gt,lt,like,and,or...)实现
	      4. 根据条件delete
	         1. 可以用delete(wrapper)方法
	      5. 根据id 查询
	         1. selectBatchIds 根据id 集合批量查询
		     根据条件查询
		     1. selectOne(wrapper) 如结果有多条会抛异常
		     2. selectCount(wrapper) 查询数据条数
	      6. 分页查询
             1. 配置分页插件 
			    (如配置在mybatis主配置文件里用<plugin>标签，如配置在springmvc配置文件springmvc.xml里用<bean>)
                1.1 写一个配置类，用@Bean注解 在容器中放入一个PaginationInterceptor对象
                1.2 使用selectPage(page,wrapper), page 可new 得到，在构造器中设置页面的当前页，数据条数				
		            Page<User> Page = userMapper.selectPage(page, wrapper);
	                List<User> users = Page.getRecords();
			 注意：页面是从第一页开始计算的
		  7. 排序查询
		     1. wrapper.orderBy()/ wrapper.orderByDesc() 
		  8. 指定查询字段，而非select * from ，对wrapper设置条件后，再调用select(需要显示的字段)设置一下条件，
		     最后在将wrapper放入查询方法进行查询
			 
	  3.2 在yml文件中配置全局id自增;当pojo类很多时，以除掉实体对象中的@TableId(type=IdType.AUTO)
		    mybatis-plus.global-config.db-config.id-type=auto
			
	  3.3 在yml文件中配置全局表名前缀;当pojo类很多时，以除掉实体对象中的@TableName()
		    mybatis-plus.global-config.db-config.table-prefix=表名前缀
	  3.4 AR
	      实体类extends Model<>, 实体类对象就有了操作数据库的方法，替代注入Mapper对象的操作，但是底层仍然是用Mapper操作
		  注意：Mapper接口不能除掉
	  3.5 自动填充功能
	      1. 编写一个类，implements MetaObjectHandler，实现方法里写填充的逻辑，类上加@Component即可
		  2. 实体类属性上添加@TableField(fill = FieldFill.INSERT) 代表插入时填充
	  3.6 乐观锁插件@Version
	      1. 配置类里用bean 注解标着方法，此方法里 new OptimisticLockerInterceptor(), return
	      2. 为实体类添加属性private Integer version,注上@Version
		  3. 数据库表添加字段version，初始值设为1
	  3.7 逻辑删除功能@TableLogic
	      1. yml文件设置(此为默认值，也可不设置)
		     mybatis-plus.global-config.db-config.logic-delete-value=1
			 mybatis-plus.global-config.db-config.logic-not-delete-value=0
	      2. 表增加字段delete DEFAULT 0 
		  3. 实体类对象加deleted属性，添加@TableLogic
		  注意：当设置逻辑删除功能时，调用delete方法，实际仅更新了数据库delete字段为1，后续查询时，只能查delete为0的数据
	  3.8 枚举  可以实现代码中枚举对象到数据库中数值的转化         
		  1. yml文件设置
             1.1 mybatis-plus: type-enums-package:
			 1.2 mybatis-plus: configuration: default-enum-type-handler: org.apache.ibatis.type.EnumOrdinalTypeHandler
          2. 定义枚举类，在与数据库数值转化的属性上注@EnumValue
		  3. 表增加字段         
          4. 实体类对象加属性
		  注意：枚举类举例：
		   MAN(1, "男"),
           WOMAN(2, "女");
		  如代码这样写，存入数据库的情况是，男的存0，女的存1; 因为枚举项在枚举类中出现的序号从0开始的		
		  注意：枚举类对象是static的，final的		  
      3.9 代码生成器
          Mybatis-Plus 代码生成器比Mybatis 功能更强大  
	      
JPA
      1. 如果使用JPA规范进行数据库操作，底层需要hibernate作为其实现类完成数据持久化工作，hibernate封装了JDBC
	     不需要导入额外的JPA相关的jar包，只需要导入JPA的提供商的jar包,当选择Hibernate作为JPA的提供商，需导入Hibernate的相关jar包
      2. 搭建环境
	     1. resources下建META-INF文件夹，文件夹下创建一个名为persistence.xml的配置文件
		    persistence-unit 标签   transaction-type：RESOURCE_LOCAL：本地事务管理，JTA：分布式事务管理
			配置JPA规范的服务提供商：
			<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
			properties 标签配置数据库信息
		 	显示SQL语句配置：
			<property name="hibernate.show_sql" value="true" />
			自动创建表配置：create(有表会删除再创建)，update(有表更新，无表创建)
			<property name="hibernate.hbm2ddl.auto" value="create" />
		 2. 建立实体类与表的关系
		    @Entity 表名是实体类
			@Table(name = "")对应表名
			@Id 声明主键
			@GeneratedValue(strategy = GenerationType.IDENTITY) 声明自增
	        @Column(name="") 属性与字段的映射
		 3. CRUD操作
		    加载配置文件：Persistence.createEntityManagerFactory()
		    调用EntityManager的persist,merge,remove,getReference 方法
		 4. JPQL查询 应对复杂查询
		    jpql语句是针对对象的，里面放的是类名，属性名，语法与SQL类似，但不支持星号(*)
			
Spring Data JPA 
         1. Spring提供的一套对JPA操作更加高级的封装
		   1. 导入注解包的时候，一定要导入javax.persistence下的
		   2. Dao层接口，需实现JpaRepository<>和JpaSpecificationExecutor<>
 	          JpaRepository<实体类类型，主键类型>：用来完成基本CRUD操作
              JpaSpecificationExecutor<实体类类型>：用于复杂查询（分页等查询操作）
		 2. 自定义查询条件
           1. 在dao接口方法上，使用@Query(jpql语句)
         3. 自定义更新条件
           1. 在dao接口方法上，使用@Query(jpql语句)
		   2. 在dao接口方法上，再加@Modifying 来将该操作标识为修改
		   3. 测试时，测试方法上加@transactional (当做更新，删除操作时都需要添加）
		   4. 测试时，测试方法上再加@rollback(value=false)，不然会自动回滚
	     4. 方法规则查询
		   1. 只需要按照Spring Data JPA提供的方法命名规则定义方法的名称，就可以完成查询工作，除掉@Query(jpql语句)
	          例如：findByLastnameAndFirstname、findByLastnameOrFirstname、findByFirstnameEquals、findByAgeLessThan
			        findByAgeGreaterThan、findByFirstnameLike...
	     注意：实体类与表，Spring Data Jpa 默认不会驼峰匹配
		 5. Specification动态查询
		    1. Specification 的作用类似与Mybatis-Plus的wrapper ，用来设置查询条件
			2. Mybatis-Plus里是选择new QueryWrapper(wrapper的实现类)，而Spring Data JPA里是 new Specification<>创建匿名内部类
			   通过实现来设置条件(借助root，criteriaBuilder)
			3. 涉及排序时，需要再new Sort，在构造器里设置排序的顺序，排序的属性，再将Sort，Specification对象一起作参数
			4. 涉及分页时，需要再new PageRequest(Pageable的实现类)
		    注意:页数从1开始
		 6. 表的一对多
		    1. 在主表对应的类，声明从表对应的类为属性，且为set<>，为了后续增添数据，需要用构造方法赋值，且提供get/set方法
			          在此属性上加@OneToMany(mappedBy = "从表实体类中引用主表对象的名称")
			2. 在从表对应的类，声明主表对应的类为属性，且提供get/set方法
			          在此属性上加@ManyToOne(targetEntity = 主表对应类名.class)
					              @JoinColumn(name = "外键名",referencedColumnName = "主表的主键字段名称")
	     7. 表的多对多
		    1. 表A与表B多对多，故对应的类A，类B互相有对方属性，用set集合,相对于表A来说，对方表是B，反之
			2. 类A 属性上加@ManyToMany(mappedBy = "类B中引用类A对象的名称")
			3. 类B 属性上加@ManyToMany(targetEntity：配置目标的实体类。映射多对多的时候不用写)
			               @JoinTable(name="中间表的名称", joinColumns={@JoinColumn(name="",referencedColumnName="")},						   
                                                           inverseJoinColumns={@JoinColumn(name="",referencedColumnName="")})
	           备注：joinColumns ：配置的是当前类对应的表在中间表的外键(名称，关联的字段)
			         inverseJoinColumns：配置的是对方类对应的表在中间表的外键(名称，关联的字段)
		 8. 级联操作
		     表的一对多、表的多对多 实现级联操作，只需在@OneToMany、@ManyToMany里多加一个属性cascade=cascade.Type.all			 
	     9. 对象导航查询(多表查询时)
		     查询一个对象的时候，通过此对象查询所有关联对象(因为类里有另一个类的属性，且有get/set方法)
		 10.加载方式
		     只需在@OneToMany、@ManyToMany里多加一个属性fetch
			 
Springboot	
    基于Spring框架，简化配置，管理依赖，以快速搭建Spring项目
	核心功能：1.起步依赖(将具备某种功能的坐标打包到一起，提供一些默认的功能)
	          2.自动配置
	1. @SpringBootApplication 注类上表示主启动类，实际是组合注解:1.作为配置类2.扫描当前包及其子包3...
	2. application.yml 使用自己的配置替换默认配置(SpringBoot默认会从Resources目录下加载application.yml/application.properties)
	   
	注意：如何查看现有配置，再到application.yml替换默认配置：
	   1. 找spring-boot-autoconfigure jar包
	   2. 再找springframework.boot.autoconfigure
	   3. 再根据细分的包名找需要查看得内容
	   4. 最后找XXXProperties文件即可
	3. Springboot配置静态资源
	   只需在resources下建包，包名static,静态资源放入static包下即可(由于框架默认设置，会去读取该包)
	4. Springboot配置拦截器(与SpringMVC中配置不一样，因Springboot没有xml文件，采用Java类来处理)
	   1. 自定义拦截器类(实现HandlerInterceptor)
	   2. 再写配置类，在该类中注册组件(需要实现WebMvcConfigurer,实现它的方法来注册)
	4. Springboot配置事务和连接池
	   1. 在yml文件配置参数即可(框架默认hikari连接池)
	   2. @EnableTransactionManagement 开启事务支持
	      @Transactional 可开启事务
	5. Springboot整合Mybatis
	   1.添加了启动依赖 mybatis-spring-boot-starter 以整合mybatis(mybatis开头，yml文件里前缀也是mybatis)
	      1.1 整合Mybatis，在yml文件配置别名 mybatis: type-aliases-package
		  1.2 在主启动类上添加@MapperScan("mapper包路径")，以替代mybatis里的mappers映射                                              
    6. Springboot整合通用Mapper  以省去简单SQL语句的编写
	   6.1 导入启动依赖mapper-spring-boot-starter(tk.mybatis)  
           注意：tk.mybatis与Mybatis-Plus作用类似
	   6.2 extends Mapper<>
	   6.3 当使用tk.mybatis的通用Mapper时，不再使用Mybatis的扫描注解@MapperScan，要使用tk.mybatis的扫描注解@MapperScan
	7. Springboot整合Junit
	   7.1 导入启动依赖spring-boot-starter-test
	   7.2 选中要测试的类(service层)，ctrl+shift+T，即可生产对应测试类
	   7.3 与Spring整合Junit不同，Springboot整合Junit使用@RunWith(SpringRunner.class)、@SpringBootTest
	8. Springboot整合Redis
	   8.1 导入启动依赖spring-boot-starter-data-redis
	   8.2 配置redis的连接信息
	   8.3 注入RedisTemplate 操作	
	9.Springboot整合Jpa
	   9.1 导入启动依赖spring-boot-starter-data-jpa	  
	   9.2 配置数据库自动创建表spring: jpa: hibernate: ddl-auto: 
       9.3 配置显示SQL语句spring: show-sql: true		
	10. Springboot打包并运行
	   10.1 pom文件添加maven插件spring-boot-maven-plugin，用maven 的package打包
	   10.2 命令行java -jar包名	
	   
SpringCloud
    1. 父工程准备
	   IDEA设置字符编码; 注解生效激活;java编译版本选8; 父工程<packaging>pom</packaging>
	   IDEA 需要安装lombok插件，使用@Slf4j注解才能输出日志，不然找不到log.info()方法
	2. 借助RestTemplate实现服务之间的调用(URL指明另外module controller层的方法)
	   实现了get请求(地址带参数)，赋值到方法的对象参数中，对象参数再传入RestTemplate的方法中，以Post请求方式并调用另外
	   module controller层的方法，其中则可用@RequestBody取出对象
	   注意：
	       1. 当集群时，RestTemplate配置类一定要指明负载策略以让程序确定访问那台主机(使用@LoadBalanced默认轮询策略)
    3. 服务与发现
	   1. 用于查询注册中心的服务情况
       2. Cloud框架自带接口DiscoveryClient，可在代码中直接注入使用，调用该对象的方法
  	   3. 需要主启动类上开启该功能@EnableDiscoveryClient
	4. Eureka自我保护机制
	   当注册在上面的客户端有故障(通过心跳包)，Eureka不会立即剔除，有默认保留90s，以免因客户端网络卡顿等而被剔除
	5. Consul
	   命令行consul agent -dev即可运行，通过http://localhost:8500即可访问
	   Eureka      java语言     AP    有Web界面
	   Zookeeper   java语言     CP    没有Web界面
	   Consul      GO语言       CP    有Web界面
	6. Ribbon
	   1. 负载均衡，客户端工具
	   2. Eureka自带Ribbon
	   3. 默认自带核心组件IRule接口，实现类有RoundRobinRule(轮询),RandomRule(随机),RetryRule(重试，即先按轮询策略获取服务，
	      如失败则在指定时间内重试)...
	   4. 更改负载均衡规则(默认RoundRobinRule),在主启动类扫描不到的包下写配置类，用@Bean把IRule接口实现类对象放入容器，
          主启动类加@RibbonClient(name="服务名称",configuration=配置类.class)	   
	      注意：更改规则时，@LoadBalanced还要保留在getRestTemplate方法上
		  
	7. OpenFeign 
	   1. 封装了Ribbon，只需创建接口，并使用注解，即可完成服务提供方的接口绑定
	   2. 步骤：1. 主启动类上@EnableFeignClients开启
	            2. 消费者service层创建接口，加@FeignClient(name = "服务名称")
				   在接口的方法上@GetMapping指明上述服务名称下的哪一个方法，如有参数，需用@PathVariable赋值到接口的参数里
				3. 写一个类实现消费者service层接口，里面的方法作为fallback方法，故消费者service层的接口上注解还要加一个属性
				   @FeignClient(name = "服务名称", fallback="service层接口.class")
	   总结：OpenFeign相当于增加了一层service接口，封装了之前Ribbon里的RestTemplate，现在只用对service接口设置即可，默认策略也是轮询
	   3. 超时控制
          1. OpenFeign默认等待1s，获取不到数据就报错; yml文件可自设置超时时间
    8. Hystrix 断路器
        1. 避免级联故障
		   如生产者服务卡顿，因Tomcat线程池里的工作线程已经被挤占完，此时消费者调用生产者，响应会缓慢
		2. 解决：
             2.1 服务降级 fallback 实际主要用于消费者端，功能上也可以用于生产者端			
		         1.消费者端
				    1.案例消费者使用OpenFeign，故yml文件设置 feign:hystrix:enabled: true 开启Hystrix
				    2.主启动类加@EnableHystrix开启支持
					3.controller层在目标方法上加@HystrixCommand(fallbackMethod = "跳转方法名",commandProperties = {			  
                  				  @HystrixProperty(name="execution.isolation.thread.timeoutInMilliseconds",value="接受等待的毫秒值")})	
				    4.写跳转方法
					注意当运行出错，如没有try-catch异常，会自动运行fallbackMethod
                 2.消费者端改进：
				    1. 思路：对service层接口所有方法进行统一降级，把跳转方法与功能代码分离
					2. 写一个类实现service层接口的所有方法，@Compoent加入容器
					3. service接口的注解@FeignClient需要增加一个属性，改为@FeignClient(name = "",fallback=上述类.class)                   				   
			 2.2 服务熔断 break 
			      1.生产者端
				     1.主启动类加@EnableCircuitBreaker开启断路器
			         @HystrixCommand(fallbackMethod = "跳转方法名",commandProperties = {
                                     @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),// 是否开启断路器
                                     @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),// 请求总数阈值
                                     @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"), // 快照时间窗
                                     @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60"),// 错误百分比阈值})
			      2. 触发熔断后，需要等一会才能恢复		
		     2.3 服务限流 flowlimit(Sentinel将其替代)
			 
    9. GateWay
        1. 是微服务的入口，异步非阻塞; web请求通过一些匹配条件，定位到真正的服务节点，并在转发过程前后，进行一些精细化的控制
		   Predicate就是匹配条件，Filter可以理解为拦截器，加上URI，就可以实现路由
		   1. Route 路由
		      1.由ID,URI,一系列断言，过滤器组成，如断言为true 则匹配该路由(路由转发)
			  2.通过yml配置，可以用网关的端口替代服务的端口访问，并且可以实现负载均衡
		   2. Predicate 断言
		      1.开发人员可以匹配HTTP请求中的所有内容(例如请求头，请求参数),如请求与断言相匹配则进行路由
			  2.yml可以设置路由条件：请求的时间(After/before/between),Cookie的内容,Header的内容...
		   3. Filter 过滤
		      1.使用过滤器，可以在请求被路由前或者之后对请求进行修改
			  2.网关内置了很多过滤器，实际多用自定义过滤器
			     1. 实现GlobalFilter,Ordered接口，在filter的实现方法里写过滤逻辑，getOrder通常不使用; 最后用@Component注入容器	   	
	
	10. SpringCloud Config
        1. 分布式配置中心  动态管理yml文件(借助Github)
		   服务端：1.1 application.yml文件配置连接Github，则可通过http:/ip地址：端口号/Github上分支/文件名访问
		           1.2 Github上分支：例如：master分支、dev分支
		           1.3 文件名：命名规则例如config-dev.yml、config-test.yml(与yml文件的配置内容对应)
				   1.4 启动类上加@EnableConfigServer
		   客户端：1.1 通过bootstrap.yml文件配置加载到服务端的yml配置文件，bootstrap.yml优先级高于application.yml
		           1.2 在Controller层可直接注入属性(Github上的yml文件配置过的属性)
           注意：当在Github上更新yml文件/本地更新上传Github时，刷新服务端可更新数据，但刷新客户端无法更新，需要重新启动才获取最新数据			   
		   	   					 
	11. SpringCloud Stream 
	    1. 消息驱动框架
		   屏蔽底层消息中间件的差异，统一编程模型，仅支持RabbitMQ、Kafka;配置绑定器Binders连接消息中间件，
		   配置bindings来确定绑定细节		  
		2. 引入注解：		
		   2.1 @StreamListener
		      监听队列，用于消费者接收消息; 用于消费者Controller层方法@StreamListener(Sink.INPUT)
		   2.2 @EnableBinding
		      信道channel与exchange绑定在一起; 用于生产者service层@EnableBinding(Source.class)
			                                   与消费者Controller层@EnableBinding(Sink.class)
           生产者service层有了@EnableBinding(Source.class)，Controller层中可以注入，不用再加@service		  
	    3. 流程：
		   3.1 生产者调用消息通道 MessageChannel(SpringCloud Stream框架自带类)
		   3.2 消费者消费消息Message<>(SpringCloud Stream 框架自带类)
		   3.3 消费者Controller层类上有了@EnableBinding(Sink.class)， 方法上@StreamListener(Sink.INPUT)即可监听
	    4. 当存在多个消费者，需在yml文件配置group 避免重复消费(用group使消费者形成竞争关系，都从RabbitMQ获取消息)
		   默认归入同一组，消息会重复消费
		5. group配置后可保证消息持久化：即使停止服务，也不会错过消息(开启服务时，会获取到之前的消息)
			 
	12. SpringCloud Sleuth
	    1. 分布式请求链路跟踪
		   命令行 java -jar Zipkin的jar包名.jar 即可开启Zipkin(跟踪请求的图形化工具)
		   Zipkin 端口号9411;  Web界面：localhost:9411 
		   
    13. SpringCloud Alibaba
	    1. Nacos 注册与配置中心
		   1. IDEA虚拟端口：
			  VM option 填写-Dserver.port=端口号   以支持一个模块以多个不同端口号同时运行
		   2. 因整合了ribbon，默认支持负载均衡
		   3. 支持AP，CP切换
		   4. 作为配置中心时，仍有两个文件yml, bootstrap,只是改为放在Nacos，替代放在Github
		   5. @RefreshScope
		sentinel 限流
		    sentinel实行懒加载方式，当有请求时，才开始监控
		    当违反规则时，作为兜底方法参数必须带上 BlockException exception，不然会报错
			当服务器停止，sentinel上的规则丢失(即当服务器再启动，sentinel什么也没有)，可把sentinel的规则持久化到 Nacos 
			当用@GetMapping("路径")里的路径监控时，会使用默认的页面作限流反馈;
			但是用@SentinelResource(value = "名称",blockHandler = "方法名")里的名称监控时，可以使用自定义方法的返回值作限流反馈;
			
	    
			 
			 
			 
	  
   
   
   
   
   